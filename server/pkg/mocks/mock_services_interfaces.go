// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination ../mocks/mock_services_interfaces.go -source service.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockQuestionService is a mock of QuestionService interface.
type MockQuestionService struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionServiceMockRecorder
	isgomock struct{}
}

// MockQuestionServiceMockRecorder is the mock recorder for MockQuestionService.
type MockQuestionServiceMockRecorder struct {
	mock *MockQuestionService
}

// NewMockQuestionService creates a new mock instance.
func NewMockQuestionService(ctrl *gomock.Controller) *MockQuestionService {
	mock := &MockQuestionService{ctrl: ctrl}
	mock.recorder = &MockQuestionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionService) EXPECT() *MockQuestionServiceMockRecorder {
	return m.recorder
}

// GetQuestion mocks base method.
func (m *MockQuestionService) GetQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetQuestion", ctx)
}

// GetQuestion indicates an expected call of GetQuestion.
func (mr *MockQuestionServiceMockRecorder) GetQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestion", reflect.TypeOf((*MockQuestionService)(nil).GetQuestion), ctx)
}

// ListQuestions mocks base method.
func (m *MockQuestionService) ListQuestions(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListQuestions", ctx)
}

// ListQuestions indicates an expected call of ListQuestions.
func (mr *MockQuestionServiceMockRecorder) ListQuestions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestions", reflect.TypeOf((*MockQuestionService)(nil).ListQuestions), ctx)
}

// RemoveQuestion mocks base method.
func (m *MockQuestionService) RemoveQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveQuestion", ctx)
}

// RemoveQuestion indicates an expected call of RemoveQuestion.
func (mr *MockQuestionServiceMockRecorder) RemoveQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuestion", reflect.TypeOf((*MockQuestionService)(nil).RemoveQuestion), ctx)
}

// SubmitQuestion mocks base method.
func (m *MockQuestionService) SubmitQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubmitQuestion", ctx)
}

// SubmitQuestion indicates an expected call of SubmitQuestion.
func (mr *MockQuestionServiceMockRecorder) SubmitQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitQuestion", reflect.TypeOf((*MockQuestionService)(nil).SubmitQuestion), ctx)
}

// UpdateQuestion mocks base method.
func (m *MockQuestionService) UpdateQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateQuestion", ctx)
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockQuestionServiceMockRecorder) UpdateQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQuestionService)(nil).UpdateQuestion), ctx)
}

// MockCodeSubmitterService is a mock of CodeSubmitterService interface.
type MockCodeSubmitterService struct {
	ctrl     *gomock.Controller
	recorder *MockCodeSubmitterServiceMockRecorder
	isgomock struct{}
}

// MockCodeSubmitterServiceMockRecorder is the mock recorder for MockCodeSubmitterService.
type MockCodeSubmitterServiceMockRecorder struct {
	mock *MockCodeSubmitterService
}

// NewMockCodeSubmitterService creates a new mock instance.
func NewMockCodeSubmitterService(ctrl *gomock.Controller) *MockCodeSubmitterService {
	mock := &MockCodeSubmitterService{ctrl: ctrl}
	mock.recorder = &MockCodeSubmitterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeSubmitterService) EXPECT() *MockCodeSubmitterServiceMockRecorder {
	return m.recorder
}

// ListCodeExecutors mocks base method.
func (m *MockCodeSubmitterService) ListCodeExecutors(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListCodeExecutors", ctx)
}

// ListCodeExecutors indicates an expected call of ListCodeExecutors.
func (mr *MockCodeSubmitterServiceMockRecorder) ListCodeExecutors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeExecutors", reflect.TypeOf((*MockCodeSubmitterService)(nil).ListCodeExecutors), ctx)
}

// SetCodeExecutor mocks base method.
func (m *MockCodeSubmitterService) SetCodeExecutor(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCodeExecutor", ctx)
}

// SetCodeExecutor indicates an expected call of SetCodeExecutor.
func (mr *MockCodeSubmitterServiceMockRecorder) SetCodeExecutor(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCodeExecutor", reflect.TypeOf((*MockCodeSubmitterService)(nil).SetCodeExecutor), ctx)
}

// SubmitCode mocks base method.
func (m *MockCodeSubmitterService) SubmitCode(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubmitCode", ctx)
}

// SubmitCode indicates an expected call of SubmitCode.
func (mr *MockCodeSubmitterServiceMockRecorder) SubmitCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCode", reflect.TypeOf((*MockCodeSubmitterService)(nil).SubmitCode), ctx)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetLanguage mocks base method.
func (m *MockService) GetLanguage(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetLanguage", ctx)
}

// GetLanguage indicates an expected call of GetLanguage.
func (mr *MockServiceMockRecorder) GetLanguage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguage", reflect.TypeOf((*MockService)(nil).GetLanguage), ctx)
}

// GetQuestion mocks base method.
func (m *MockService) GetQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetQuestion", ctx)
}

// GetQuestion indicates an expected call of GetQuestion.
func (mr *MockServiceMockRecorder) GetQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestion", reflect.TypeOf((*MockService)(nil).GetQuestion), ctx)
}

// ListCodeExecutors mocks base method.
func (m *MockService) ListCodeExecutors(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListCodeExecutors", ctx)
}

// ListCodeExecutors indicates an expected call of ListCodeExecutors.
func (mr *MockServiceMockRecorder) ListCodeExecutors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeExecutors", reflect.TypeOf((*MockService)(nil).ListCodeExecutors), ctx)
}

// ListQuestions mocks base method.
func (m *MockService) ListQuestions(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListQuestions", ctx)
}

// ListQuestions indicates an expected call of ListQuestions.
func (mr *MockServiceMockRecorder) ListQuestions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestions", reflect.TypeOf((*MockService)(nil).ListQuestions), ctx)
}

// ListSupportedLanguages mocks base method.
func (m *MockService) ListSupportedLanguages(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListSupportedLanguages", ctx)
}

// ListSupportedLanguages indicates an expected call of ListSupportedLanguages.
func (mr *MockServiceMockRecorder) ListSupportedLanguages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedLanguages", reflect.TypeOf((*MockService)(nil).ListSupportedLanguages), ctx)
}

// RemoveQuestion mocks base method.
func (m *MockService) RemoveQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveQuestion", ctx)
}

// RemoveQuestion indicates an expected call of RemoveQuestion.
func (mr *MockServiceMockRecorder) RemoveQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuestion", reflect.TypeOf((*MockService)(nil).RemoveQuestion), ctx)
}

// SetCodeExecutor mocks base method.
func (m *MockService) SetCodeExecutor(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCodeExecutor", ctx)
}

// SetCodeExecutor indicates an expected call of SetCodeExecutor.
func (mr *MockServiceMockRecorder) SetCodeExecutor(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCodeExecutor", reflect.TypeOf((*MockService)(nil).SetCodeExecutor), ctx)
}

// SubmitCode mocks base method.
func (m *MockService) SubmitCode(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubmitCode", ctx)
}

// SubmitCode indicates an expected call of SubmitCode.
func (mr *MockServiceMockRecorder) SubmitCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCode", reflect.TypeOf((*MockService)(nil).SubmitCode), ctx)
}

// SubmitQuestion mocks base method.
func (m *MockService) SubmitQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubmitQuestion", ctx)
}

// SubmitQuestion indicates an expected call of SubmitQuestion.
func (mr *MockServiceMockRecorder) SubmitQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitQuestion", reflect.TypeOf((*MockService)(nil).SubmitQuestion), ctx)
}

// UpdateQuestion mocks base method.
func (m *MockService) UpdateQuestion(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateQuestion", ctx)
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockServiceMockRecorder) UpdateQuestion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockService)(nil).UpdateQuestion), ctx)
}
