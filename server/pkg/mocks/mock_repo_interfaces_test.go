// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -destination ../mocks/mock_repo_interfaces_test.go -source interfaces.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "l33tcode/server/pkg/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQuestionRepository is a mock of QuestionRepository interface.
type MockQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRepositoryMockRecorder
	isgomock struct{}
}

// MockQuestionRepositoryMockRecorder is the mock recorder for MockQuestionRepository.
type MockQuestionRepositoryMockRecorder struct {
	mock *MockQuestionRepository
}

// NewMockQuestionRepository creates a new mock instance.
func NewMockQuestionRepository(ctrl *gomock.Controller) *MockQuestionRepository {
	mock := &MockQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRepository) EXPECT() *MockQuestionRepositoryMockRecorder {
	return m.recorder
}

// DeleteQuestion mocks base method.
func (m *MockQuestionRepository) DeleteQuestion(ctx context.Context, user, qid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", ctx, user, qid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockQuestionRepositoryMockRecorder) DeleteQuestion(ctx, user, qid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).DeleteQuestion), ctx, user, qid)
}

// GetQuestion mocks base method.
func (m *MockQuestionRepository) GetQuestion(ctx context.Context, user, qid, language string) (models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestion", ctx, user, qid, language)
	ret0, _ := ret[0].(models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestion indicates an expected call of GetQuestion.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestion(ctx, user, qid, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestion), ctx, user, qid, language)
}

// ListQuestions mocks base method.
func (m *MockQuestionRepository) ListQuestions(ctx context.Context, user, language string) ([]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestions", ctx, user, language)
	ret0, _ := ret[0].([]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestions indicates an expected call of ListQuestions.
func (mr *MockQuestionRepositoryMockRecorder) ListQuestions(ctx, user, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestions", reflect.TypeOf((*MockQuestionRepository)(nil).ListQuestions), ctx, user, language)
}

// SaveQuestion mocks base method.
func (m *MockQuestionRepository) SaveQuestion(ctx context.Context, user string, q models.Question) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveQuestion", ctx, user, q)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveQuestion indicates an expected call of SaveQuestion.
func (mr *MockQuestionRepositoryMockRecorder) SaveQuestion(ctx, user, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).SaveQuestion), ctx, user, q)
}

// MockCodeExecuter is a mock of CodeExecuter interface.
type MockCodeExecuter struct {
	ctrl     *gomock.Controller
	recorder *MockCodeExecuterMockRecorder
	isgomock struct{}
}

// MockCodeExecuterMockRecorder is the mock recorder for MockCodeExecuter.
type MockCodeExecuterMockRecorder struct {
	mock *MockCodeExecuter
}

// NewMockCodeExecuter creates a new mock instance.
func NewMockCodeExecuter(ctrl *gomock.Controller) *MockCodeExecuter {
	mock := &MockCodeExecuter{ctrl: ctrl}
	mock.recorder = &MockCodeExecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeExecuter) EXPECT() *MockCodeExecuterMockRecorder {
	return m.recorder
}

// ExecuteCode mocks base method.
func (m *MockCodeExecuter) ExecuteCode(ctx context.Context, user, code string, question *models.Question, language *models.Language) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCode", ctx, user, code, question, language)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCode indicates an expected call of ExecuteCode.
func (mr *MockCodeExecuterMockRecorder) ExecuteCode(ctx, user, code, question, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCode", reflect.TypeOf((*MockCodeExecuter)(nil).ExecuteCode), ctx, user, code, question, language)
}

// MockLanguageRepository is a mock of LanguageRepository interface.
type MockLanguageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageRepositoryMockRecorder
	isgomock struct{}
}

// MockLanguageRepositoryMockRecorder is the mock recorder for MockLanguageRepository.
type MockLanguageRepositoryMockRecorder struct {
	mock *MockLanguageRepository
}

// NewMockLanguageRepository creates a new mock instance.
func NewMockLanguageRepository(ctrl *gomock.Controller) *MockLanguageRepository {
	mock := &MockLanguageRepository{ctrl: ctrl}
	mock.recorder = &MockLanguageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageRepository) EXPECT() *MockLanguageRepositoryMockRecorder {
	return m.recorder
}

// GetLanguage mocks base method.
func (m *MockLanguageRepository) GetLanguage(ctx context.Context, lang string) (models.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguage", ctx, lang)
	ret0, _ := ret[0].(models.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguage indicates an expected call of GetLanguage.
func (mr *MockLanguageRepositoryMockRecorder) GetLanguage(ctx, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguage", reflect.TypeOf((*MockLanguageRepository)(nil).GetLanguage), ctx, lang)
}

// GetSupportedLanguagesFromList mocks base method.
func (m *MockLanguageRepository) GetSupportedLanguagesFromList(ctx context.Context, languages []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguagesFromList", ctx, languages)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedLanguagesFromList indicates an expected call of GetSupportedLanguagesFromList.
func (mr *MockLanguageRepositoryMockRecorder) GetSupportedLanguagesFromList(ctx, languages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguagesFromList", reflect.TypeOf((*MockLanguageRepository)(nil).GetSupportedLanguagesFromList), ctx, languages)
}

// ListSupportedLanguages mocks base method.
func (m *MockLanguageRepository) ListSupportedLanguages(ctx context.Context, user string) ([]models.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedLanguages", ctx, user)
	ret0, _ := ret[0].([]models.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportedLanguages indicates an expected call of ListSupportedLanguages.
func (mr *MockLanguageRepositoryMockRecorder) ListSupportedLanguages(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedLanguages", reflect.TypeOf((*MockLanguageRepository)(nil).ListSupportedLanguages), ctx, user)
}
